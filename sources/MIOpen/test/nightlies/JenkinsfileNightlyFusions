
def rocmnode(name) {
    def node_name = 'rocmtest'
    if(name == 'fiji') {
        node_name = 'rocmtest && fiji';
    } else if(name == 'vega') {
        node_name = 'rocmtest && vega';
    } else if(name == 'vega10') {
        node_name = 'rocmtest && vega10';
    } else if(name == 'vega20') {
        node_name = 'rocmtest && vega20';
    } else {
        node_name = name
    }
    return node_name
}


def buildJob(compiler, flags, image, test, testargs){

        env.HSA_ENABLE_SDMA=0 
        checkout scm
        def retimage
        try {
            retimage = docker.build("${image}", "--build-arg PREFIX=/usr/local .")
            withDockerContainer(image: image, args: '--device=/dev/kfd --device=/dev/dri --group-add video') {
                timeout(time: 5, unit: 'MINUTES')
                {
                    sh 'PATH="/opt/rocm/opencl/bin/x86_64/:$PATH" clinfo'
                }
            }
        } catch(Exception ex) {
            retimage = docker.build("${image}", "--build-arg PREFIX=/usr/local --no-cache .")
            withDockerContainer(image: image, args: '--device=/dev/kfd --device=/dev/dri --group-add video') {
                timeout(time: 5, unit: 'MINUTES')
                {
                    sh 'PATH="/opt/rocm/opencl/bin/x86_64/:$PATH" clinfo'
                }
            }
        }

        withDockerContainer(image: image, args: '--device=/dev/kfd --device=/dev/dri --group-add video -v=/var/jenkins/:/var/jenkins') {
            timeout(time: 8, unit: 'HOURS')
            {
                sh "echo \$HSA_ENABLE_SDMA"
                sh "rm -rf build; mkdir build; cd build; CXX=${compiler} CXXFLAGS='-Werror' cmake -DMIOPEN_GPU_SYNC=On -DMIOPEN_TEST_FLAGS='--disable-verification-cache' -DCMAKE_CXX_FLAGS_DEBUG='-g -fno-omit-frame-pointer -fsanitize=undefined -fno-sanitize-recover=undefined' ${flags} .."
                sh "cd build; CTEST_PARALLEL_LEVEL=4 MIOPEN_VERIFY_CACHE_PATH=/var/jenkins/.cache/miopen/vcache MIOPEN_CONV_PRECISE_ROCBLAS_TIMING=0 dumb-init make -j\$(nproc) ${test}"
                sh "./build/bin/${test} ${testargs}"

            }
        }
        return retimage
}

pipeline {
    agent none
    environment{
        image = "miopen"
        buildflag = '-DBUILD_DEV=On -DMIOPEN_TEST_ALL=On -DCMAKE_BUILD_TYPE=release'
    }
    stages{
        stage("HIP Release Fusions fp32"){
            parallel{
                stage("CBA inference") {
                    agent{ label rocmnode("vega") }
                    steps{
                        buildJob("hcc", buildflag, image, 'test_cba_inference', '--all -n 4 --verbose --disable-verification-cache')
                    }
                }
                
                stage("CBNA inference") {
                    agent{ label rocmnode("vega") }
                    steps{
                        buildJob("hcc", buildflag, image, 'test_cbna_inference', '--all -n 4 --verbose --disable-verification-cache')
                    }
                }
                stage("NA inference") {
                    agent{ label rocmnode("vega") }
                    steps{
                        buildJob("hcc", buildflag, image, 'test_na_inference', '--all -n 4 --verbose --disable-verification-cache')
                    }
                }
                stage("NA train") {
                    agent{ label rocmnode("vega") }
                    steps{
                        buildJob("hcc", buildflag, image, 'test_na_train', '--all -n 4 --verbose --disable-verification-cache')
                    }
                }
            }
        }
    }    
}

