diff --git a/drivers/gpu/drm/amd/amdkfd/kfd_chardev.c b/drivers/gpu/drm/amd/amdkfd/kfd_chardev.c
index 1d3cd5c50d5f..55e24391df8a 100644
--- a/drivers/gpu/drm/amd/amdkfd/kfd_chardev.c
+++ b/drivers/gpu/drm/amd/amdkfd/kfd_chardev.c
@@ -249,6 +249,28 @@ static int set_queue_properties_from_user(struct queue_properties *q_properties,
 	return 0;
 }
 
+static int kfd_ioctl_set_default_cu_mask(struct file *filep,
+	struct kfd_process *p, void *data) {
+	uint32_t new_default_cu_mask = 0;
+	int retval;
+	retval = copy_from_user(&new_default_cu_mask, (void __user *) data,
+		sizeof(args));
+	if (retval != 0) {
+		printk("AMDKFD: Failed trying to copy default CU mask from "
+			"userspace.\n");
+		return -EINVAL;
+	}
+	printk("AMDKFD: Setting default CU mask.\n");
+	if (new_default_cu_mask == 0) {
+		printk("AMDKFD: Tried to set invalid default CU mask.\n");
+		return -EINVAL;
+	}
+	p->default_cu_mask = new_default_cu_mask;
+	p->has_default_cu_mask = true;
+	printk("Set new default CU mask: 0x%08x\n", new_default_cu_mask);
+	return 0;
+}
+
 static int kfd_ioctl_create_queue(struct file *filep, struct kfd_process *p,
 					void *data)
 {
@@ -307,7 +329,8 @@ static int kfd_ioctl_create_queue(struct file *filep, struct kfd_process *p,
 
 	mutex_unlock(&p->mutex);
 
-	pr_debug("Queue id %d was created successfully\n", args->queue_id);
+	printk("AMDKFD: Queue id %d was created successfully\n",
+		args->queue_id);
 
 	pr_debug("Ring buffer address == 0x%016llX\n",
 			args->ring_base_address);
@@ -318,6 +341,28 @@ static int kfd_ioctl_create_queue(struct file *filep, struct kfd_process *p,
 	pr_debug("Write ptr address   == 0x%016llX\n",
 			args->write_pointer_address);
 
+	if (p->has_default_cu_mask) {
+		printk("AMDKFD: Trying to set default CU mask for queue %d\n",
+			args->queue_id);
+		q_properties.cu_mask = kzalloc(sizeof(uint32_t), GFP_KERNEL);
+		if (!q_properties.cu_mask) {
+			printk("AMDKFD: Failed allocating CU mask copy, "
+				"not setting default CU mask.\n");
+			return 0;
+		}
+		*(q_properties.cu_mask) = p->default_cu_mask;
+		q_properties.cu_mask_count = 32;
+		err = pqm_set_cu_mask(&p->pqm, args->queue_id, &q_properties);
+		if (err != 0) {
+			printk("AMDKFD: Failed setting default CU mask for "
+				"queue %d\n", args->queue_id);
+			kfree(q_properties.cu_mask);
+			q_properties.cu_mask_count = 0;
+		}
+		printk("AMDKFD: Set queue %d's CU mask to the default of "
+			"0x%08x OK.\n", args->queue_id, p->default_cu_mask);
+	}
+
 	return 0;
 
 err_create_queue:
@@ -1757,9 +1802,6 @@ static const struct amdkfd_ioctl_desc amdkfd_ioctls[] = {
 	AMDKFD_IOCTL_DEF(AMDKFD_IOC_UNMAP_MEMORY_FROM_GPU,
 			kfd_ioctl_unmap_memory_from_gpu, 0),
 
-	AMDKFD_IOCTL_DEF(AMDKFD_IOC_SET_CU_MASK,
-			kfd_ioctl_set_cu_mask, 0),
-
 	AMDKFD_IOCTL_DEF(AMDKFD_IOC_GET_QUEUE_WAVE_STATE,
 			kfd_ioctl_get_queue_wave_state, 0),
 
@@ -1769,6 +1811,9 @@ static const struct amdkfd_ioctl_desc amdkfd_ioctls[] = {
 	AMDKFD_IOCTL_DEF(AMDKFD_IOC_IMPORT_DMABUF,
 				kfd_ioctl_import_dmabuf, 0),
 
+	AMDKFD_IOCTL_DEF(AMDKFD_IOC_SET_CU_MASK,
+			kfd_ioctl_set_cu_mask, 0),
+
 };
 
 #define AMDKFD_CORE_IOCTL_COUNT	ARRAY_SIZE(amdkfd_ioctls)
@@ -1784,6 +1829,18 @@ static long kfd_ioctl(struct file *filep, unsigned int cmd, unsigned long arg)
 	unsigned int usize, asize;
 	int retcode = -EINVAL;
 
+	// Hack so I (hopefully) don't clobber any AMD defines.
+	if (cmd == AMDKFD_SET_DEFAULT_CU_MASK_IOCTL_CMD) {
+		printk("AMDKFD: Got SET_DEFAULT_CU_MASK_IOCTL_CMD\n");
+		process = kfd_get_process(current);
+		if (IS_ERR(process)) {
+			printk("AMDKFD: Couldn't get process.\n");
+			goto err_i1;
+		}
+		return kfd_ioctl_set_default_cu_mask(filep, process,
+			(void *) arg);
+	}
+
 	if (nr >= AMDKFD_CORE_IOCTL_COUNT)
 		goto err_i1;
 
diff --git a/drivers/gpu/drm/amd/amdkfd/kfd_priv.h b/drivers/gpu/drm/amd/amdkfd/kfd_priv.h
index c89326125d71..641c8948911b 100644
--- a/drivers/gpu/drm/amd/amdkfd/kfd_priv.h
+++ b/drivers/gpu/drm/amd/amdkfd/kfd_priv.h
@@ -729,6 +729,10 @@ struct kfd_process {
 	 */
 	unsigned long last_restore_timestamp;
 
+	// The CU mask used by default for queues created by this process.
+	bool has_default_cu_mask;
+	uint32_t default_cu_mask;
+
 	/* Kobj for our procfs */
 	struct kobject *kobj;
 	struct attribute attr_pasid;
diff --git a/include/uapi/linux/kfd_ioctl.h b/include/uapi/linux/kfd_ioctl.h
index 20917c59f39c..3096b00eed09 100644
--- a/include/uapi/linux/kfd_ioctl.h
+++ b/include/uapi/linux/kfd_ioctl.h
@@ -532,4 +532,6 @@ enum kfd_mmio_remap {
 #define AMDKFD_COMMAND_START		0x01
 #define AMDKFD_COMMAND_END		0x1E
 
+#define AMDKFD_SET_DEFAULT_CU_MASK_IOCTL_CMD (0xff1337ff)
+
 #endif
